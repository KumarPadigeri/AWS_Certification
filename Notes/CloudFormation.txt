AWS CLOUD FORMATION

## THEORY ##

Define AWS Infrastructure as Code which can be done either in YAML or JSON.

- It is free to use and you are charged for what you create.
- The resulting resources are called a stack.

Example of a JSON template:
{
    "Resouces": {
    "Hello": {
        "Type": "AWS::S3::Bucket"
        }
    }
}


The main sections in the cloud formation template is
1. Parameters: Custom Input Value
2. Conditions: Provision resources based on environment
3. Resources: (mandatatory) The resources to create
4. Mappings: Create Custom Mappings like region: AMI
5. Transforms: reference code located in s3, eg Lambda Code or reusable snippets of cloud formation code.
** Only resources section is required for template to execute. [Important]
** You can use the Parameters section to take in values at runtime.

Important Points
- Use Fn::GetAtt to get the output data in the CF.
- By Default Automatic rollback for error are enables.
- You are charged for errors.
- CF is free, underline resources are charged.
- CF use Fn:GetAtt to output data


Intrinsic Functions
1. "Fn::Join" : [ ":", [ "a", "b", "c" ] ]
return a:b:c
2. { "Fn::Select" : [ "1", [ "apples", "grapes", "oranges", "mangoes" ] ] }
return grapes

Service Role
- To separate permissions between a user and the AWS CloudFormation service, use a service role.
- AWS CloudFormation uses the service role's policy to make calls instead of the user's policy.
- A service role is an AWS Identity and Access Management (IAM) role that allows AWS CloudFormation to make calls to resources in a stack on your behalf. You can specify an IAM role that allows AWS CloudFormation to create, update, or delete your stack resources. By default, AWS CloudFormation uses a temporary session that it generates from your user credentials for stack operations. If you specify a service role, AWS CloudFormation uses the role's credentials.

Some Important Best Practices
1. Organize Your Stacks By Lifecycle and Ownership
2. Use IAM to Control Access
3. Use Cross-Stack References to Export Shared Resources
    use cross-stack references to export resources from a stack so that other stacks can use them. Stacks can use the exported resources by calling them using the Fn::ImportValue function.use cross-stack references to export resources from a stack so that other stacks can use them. Stacks can use the exported resources by calling them using the Fn::ImportValue function.
4. Verify Quotas for All Resource Types 
5. Reuse Templates to Replicate Stacks in Multiple Environments 
    To make templates reusable, use the parameters, mappings, and conditions sections so that you can customize your stacks when you create them. 
6. Use AWS::CloudFormation::Init to Deploy Software Applications on Amazon EC2 Instances
    Use AWS::CloudFormation::Init to Deploy Software Applications on Amazon EC2 Instances
7. Validate Templates Before Using Them
    During validation, AWS CloudFormation first checks if the template is valid JSON. If it isn't, AWS CloudFormation checks if the template is valid YAML.
8. Create Change Sets Before Updating Your Stacks
    Change sets allow you to see how proposed changes to a stack might impact your running resources before you implement them
9. Use Stack Policies
    Stack policies help protect critical stack resources from unintentional updates that could cause resources to be interrupted or even replaced. A stack policy is a JSON document that describes what update actions can be performed on designated resources.

AWS CloudFormation StackSets
AWS CloudFormation StackSets extends the functionality of stacks by enabling you to create, update, or delete stacks across multiple accounts and regions with a single operation.

The role in your administrator account must be named AWSCloudFormationStackSetAdministrationRole. The role in each of your target accounts must be named AWSCloudFormationStackSetExecutionRole.

## QUESTIONS ##

<Add Here>
